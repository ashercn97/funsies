{> with table as Table

{> import funsies/query/yummy
{> import funsies/schema.{type Table, type Column}
{> import gleam/string 
{> import gleam/int 
{> import gleam/pgo.{type Value} 
{> import gleam/iterator.{range, to_list}



import funs/{{ table.name }}_decoder
import funs/{{ table.name }}
import gleam/pgo 
import funsies/query/yummy
import gleam/list
import gleam/string


{> fn columnsyay(table: Table)
{%for col as Column in table.columns%} yummy.w(value.{{ col.name }}), {% endfor %}
{> endfn

pub fn insert(
  builder: yummy.QueryBuilder,
  // columns: List(String),
  value: {{ table.name }}.{{ string.capitalise(table.name) }}Row,
) -> yummy.QueryBuilder {
  yummy.QueryBuilder(
    builder.table,
    builder.select_columns,
    builder.where_clauses,
    builder.order_by_clauses,
    list.map(builder.table.columns, fn(c) { c.name }),
    // Set insert columns
    [{[ columnsyay(table) ]}],
    // Set insert values
  )
}
